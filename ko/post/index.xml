<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on What is This&#39; BLOG</title>
        <link>https://whatisthis8047.github.io/ko/post/</link>
        <description>Recent content in Posts on What is This&#39; BLOG</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-KR</language>
        <lastBuildDate>Tue, 27 Feb 2024 10:54:54 +0900</lastBuildDate><atom:link href="https://whatisthis8047.github.io/ko/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>밑바닥부터 시작하는 딥러닝 1</title>
        <link>https://whatisthis8047.github.io/ko/post/dlfromscratch1/</link>
        <pubDate>Tue, 27 Feb 2024 10:54:54 +0900</pubDate>
        
        <guid>https://whatisthis8047.github.io/ko/post/dlfromscratch1/</guid>
        <description>&lt;h1 id=&#34;밑바닥부터-시작하는-딥러닝-1httpsproductkyobobookcokrdetails000001057805&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://product.kyobobook.co.kr/detail/S000001057805&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;밑바닥부터 시작하는 딥러닝 1&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;사이토 고키 저&lt;/p&gt;
&lt;p&gt;책의 내용을 바탕으로 내용을 정리하되, 이해에 도움이 되었던 자료들도 함께 포스팅할 예정입니다.&lt;/p&gt;
&lt;h2 id=&#34;퍼셉트론&#34;&gt;퍼셉트론&lt;/h2&gt;
&lt;p&gt;퍼셉트론은 미국의 연구자인 &lt;em&gt;Frank Rosenblatt&lt;/em&gt;이 1957년에 고안한 &lt;strong&gt;알고리즘&lt;/strong&gt;입니다! 딥러닝 또는 이와 유사한 신경망 구조의 알고리즘을 배운다면 빼놓을 수 없는 개념이기도 하죠.
퍼셉트론의 작동은 아주 단순합니다. 그저, &lt;strong&gt;&amp;ldquo;여러 입력 신호를 입력받아 하나의 신호로 출력하는&amp;rdquo;&lt;/strong&gt; 과정입니다. 여기서의 &amp;ldquo;신호&amp;quot;는 마치 전류가 흐르는 것처럼 연결된 퍼셉트론들 간에 정보를 이동시키게 됩니다. 중요한 개념은 이 신호값이 이진 값인 0과 1로 표현된다는 점입니다. 0이면 퍼셉트론의 정보는 더이상 흐르지 않고, 1이면 다음 퍼셉트론으로 정보를 보내게 됩니다. 아래에서 그림으로 간단하게 퍼셉트론의 예시를 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whatisthis8047.github.io/perceptron1.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;perceptron&#34;
	
	
&gt;&lt;br&gt;
&lt;strong&gt;[Figure] 두 입력 신호를 받는 퍼셉트론&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;그림에서 원은 &amp;ldquo;뉴런&amp;rdquo; 혹은 &amp;ldquo;노드&amp;quot;라고 부르며, 퍼셉트론에 흐르는 값을 이해하기 쉽게 나타낸 것입니다. 지금 그림에서 보이는 $x1$과 $x2$가 입력 신호가 되며, $y$는 출력, $w1, w2$값은 입력 신호들의 가중치입니다. ($w$는 가중치 weight의 이니셜입니다). 입력값 $x1$과 $x2$는 각각의 연결된 가중치 $w1, w2$를 지나면서 곱해지고,
최종적으로는 $x1*w1 + x2*w2$ 값이 $y$로 들어오게 됩니다.&lt;/p&gt;
&lt;p&gt;아까 퍼셉트론의 개념 중, 퍼셉트론의 값은 0 또는 1로 표현이 된다고 했었는데,
$y = x1*w1 + x2*w2$ 이면 값이 이진수가 아닐 수도 있지 않나요? &amp;raquo; 그렇습니다! 그래서 우리는 어떤 값 $\theta$를 기준으로 $y$값이 이보다 크면 1, 작으면 0이 되도록 값을 조정합니다. 여기서 $\theta$ 는 threshold, 임계값으로 번역합니다.
즉, 아래와 같은 수식으로 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;$$
y =
\begin{cases}
0 \ (w_1x_1+ w_2x_2 \leq \theta) \\
1 \ (w_1x_1+ w_2x_2 &amp;gt; \theta)
\end{cases}
$$
&lt;strong&gt;[Equation] 퍼셉트론의 수식화&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;퍼셉트론-1&#34;&gt;퍼셉트론&lt;/h2&gt;
&lt;p&gt;앞서 봤던 그림처럼 하나의 퍼셉트론은 두개(혹은 더 많은) 입력값을 받아, 0 또는 1을 출력할 수 있었습니다. 그렇다면 컴퓨터를 구성하는 가장 기본 요소인 논리게이트 &lt;strong&gt;AND, OR, NAND&lt;/strong&gt; 등을 퍼셉트론을 통해서 표현해 볼 수 있겠습니다!&lt;/p&gt;
&lt;h3 id=&#34;and-연산&#34;&gt;AND 연산&lt;/h3&gt;
&lt;p&gt;먼저 AND의 경우엔 $x_1$ 과 $x_2$가 모두 1인 경우에만 출력 값이 1이 되어야 하므로 진리표로는 다음과 같이 쓸 수 있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$y$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;[Table] AND 진리표&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;자 퍼셉트론을 조정해서 논리게이트를 만든다는 의미는 가중치 $w_i$들과 임계값 $\theta$를 수정하여 원하는 출력값을 얻어낸다는 뜻입니다. 그렇다면 위의 진리표를 만족하게 해주는  $(w_1, w_2, \theta)$는 무엇이 될 수 있을까요?&lt;/p&gt;
&lt;p&gt;생각해보면 $(0.5, 0.5, 0.7)$ 도 가능, $(0.5, 0.5, 0.8)$ 도 가능하고, $(1.0, 1.0, 1.0)$ 도 가능하고&amp;hellip; 주어진 조건을 만족하는 경우는 사실 무수히 많습니다! 이해가 잘 안될 수 있으니 잠깐 살펴보자면, $(w_1, w_2, \theta) = (0.5, 0.5, 0.7)$로 설정하고 각각 $(x_1, x_2)$를 차례로 대입해봅시다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$(0,0) =&amp;gt; 0.5*0 + 0.5*0\ \le 0.7$ 이므로  $y = 0$&lt;/li&gt;
&lt;li&gt;$(1,0) =&amp;gt; 0.5*1 + 0.5*0\ \le 0.7$ 이므로  $y = 0$&lt;/li&gt;
&lt;li&gt;$(0,1) =&amp;gt; 0.5*0 + 0.5*1\ \le 0.7$ 이므로  $y = 0$&lt;/li&gt;
&lt;li&gt;$(1,1) =&amp;gt; 0.5*1 + 0.5*1\ &amp;gt; 0.7$ 이므로  $y = 1$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 출력값 $y$는 주어진 진리표를 모두 만족하게 됩니다.&lt;/p&gt;
&lt;p&gt;자, 그럼 개념은 모두 이해했으니, 이를 코드로 구현해봅시다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AND&lt;/span&gt;(x1, x2):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    w1, w2, theta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x1&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;w1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x2&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;w2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; theta:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; theta:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(AND(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(AND(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(AND(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(AND(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생각보다 직관적인 코드로 구현이 가능하죠? 이와 같은 방식으로 가중치와 임계값을 수정해서 OR 게이트나, NAND 게이트 또한 만들 수 있습니다! (두 게이트는 깊게 짚고 넘어가진 않겠지만, 힌트를 드리면 OR은 (0.5, 0.5, 0.2), NAND는 (-0.5, -0.5, -0.7)을 대입하면 얻을 수 있습니다.)&lt;/p&gt;
&lt;p&gt;자, 그럼 다시 딥러닝이라는 대주제로 돌아와봅시다. 퍼셉트론으로 논리게이트를 만들 수 있는건 알겠어! 근데 딥러닝 배운다면서 이 퍼셉트론 알고리즘을 먼저 배우는 이유는 뭘까요? 이는 &lt;strong&gt;퍼셉트론 알고리즘의 구조상 &amp;lsquo;층을 쌓아&amp;rsquo; 복잡한 함수를 표현할 수 있기 때문입니다.&lt;/strong&gt; 이렇듯 퍼셉트론을 여러개 쌓아 가중치를 컴퓨터가 직접 학습시키는 알고리즘을 우리는 신경망이라 합니다. 그 중 더 깊은 층을 가진 신경망을 딥러닝이라 하는 것이죠.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2017/10/06/intro-gluon-1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;deeplearning&#34;
	
	
&gt; &lt;strong&gt;[Figure] 딥러닝 알고리즘의 예시 [사진 출처: AWS]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;그렇다면 퍼셉트론의 층을 쌓는다는건 뭘까요? 이를 알아보기 위해서 &lt;strong&gt;XOR 논리 게이트&lt;/strong&gt;를 만들어 봅시다!&lt;/p&gt;
&lt;h3 id=&#34;xor배타적-논리합-게이트&#34;&gt;XOR(배타적 논리합) 게이트&lt;/h3&gt;
&lt;p&gt;XOR 게이트는 &amp;lsquo;배타적 논리합&amp;rsquo; 게이트라고도 불리며 번역된 이름처럼 &lt;strong&gt;서로 다른 입력값을 가질 때만 참(1)이 되는&lt;/strong&gt; 논리 게이트입니다. 진리표로 보자면 아래와 같습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$y$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이를 만족하는 하나의 퍼셉트론 $(w_1, w_2, \theta)$ 값이 있을까요? 결론부터 말씀드리면 없습니다. 그 이유를 시각화해서 보자면 더욱 쉽게 이해할 수 있습니다. 아래는 $(1.0, 1.0, 0.5)$ 인 퍼셉트론이 표현하는 그래프입니다. 책과 제 순서쌍이 다른 이유는 아직 $\theta$를 편향으로 표현하지 않았기 때문입니다. (블로그만 읽고 계신 분들은 신경쓰지 않으셔도 됩니다.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whatisthis8047.github.io/perceptron2.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;perceptronVisualized1&#34;
	
	
&gt; &lt;strong&gt;[Figure] $(1.0, 1.0, 0.5)$ 퍼셉트론의 시각화&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이렇게 $x_1, x_2$ 값을 각각 x축, y축으로 잡고 그래프를 그려보면 퍼셉트론이 표현되는 수식을 선분으로 그릴 수 있습니다. 그림에 그려진 회색 지대는 아래 수식과 같습니다.
$$ y = 1.0x_1 + 1.0x_2 \leq 0.5$$
시각화하여 퍼셉트론을 생각해보면 왜 가중치에 무수히 많은 값이 가능한지도 직관적으로 이해할 수 있습니다. 논리 게이트를 만드는건 위의 세모(출력값이 1)와 동그라미 값(출력값이 0)을 나누는 선분을 만드는 것과 같습니다!&lt;/p&gt;
&lt;p&gt;문제는 &lt;strong&gt;XOR 게이트&lt;/strong&gt;입니다. XOR 게이트는 다음과 같이 그려집니다.
&lt;img src=&#34;https://whatisthis8047.github.io/perceptron3.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;perceptronVisualized2&#34;
	
	
&gt;
이런 경우는 세모와 동그라미를 나눌 수 있는 직선을 그을 수 없습니다. 다시 말해, 이를 만족하는 하나의 퍼셉트론은 존재하지 않는다는 말이죠. 하지만 퍼셉트론을 여러개 이용하여 &lt;strong&gt;&amp;lsquo;층을 쌓아&amp;rsquo;&lt;/strong&gt; 이런 문제를 해결할 수 있습니다!&lt;/p&gt;
&lt;p&gt;우선 개념적으로 접근하기 위해서, 앞서 언급되었던 논리 게이트 AND, OR, NAND 세가지 게이트로 XOR 게이트를 표현해봅시다. 논리 기호는 &lt;a class=&#34;link&#34; href=&#34;https://ko.wikipedia.org/wiki/XOR_%EA%B2%8C%EC%9D%B4%ED%8A%B8#%EA%B8%B0%ED%98%B8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[위키]&lt;/a&gt;를 참조해주세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whatisthis8047.github.io/xorgate1.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;xorGate&#34;
	
	
&gt; &lt;strong&gt;[Figure] XOR 게이트 조합하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;논리 구조에 익숙하신 분들은 이미 답을 알고계셨을 수도 있겠네요! 답은 NAND랑 OR을 먼저 통과시키고 그 두 값의 결과를 AND 로 입력하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://whatisthis8047.github.io/xorgate2.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;xorGate&#34;
	
	
&gt; &lt;strong&gt;[Figure] XOR 게이트&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이렇게 통과시키게 되면 진리표는 아래와 같습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$x_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$s_1$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$s_2$&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;$y$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;짜잔! 그럼 이제 우리가 원하는 XOR 게이트의 출력값을 얻었습니다.&lt;/p&gt;
&lt;p&gt;여기서 중요한건 XOR 게이트 자체가 아닙니다. XOR 게이트를 표현하기 위해서 우리는 총 세개의 퍼셉트론을 이용했습니다. 바로 NAND와 OR 그리고 AND 게이트 입니다. 게다가 NAND 게이트의 출력과 OR 게이트의 출력을 &lt;strong&gt;다시 AND 게이트의 입력갑으로&lt;/strong&gt; 넣었습니다. 이렇게 퍼셉트론의 출력값을 다음 퍼셉트론의 입력값으로 이용하는 것을 퍼셉트론의 &amp;lsquo;층을 쌓는다&amp;rsquo;고 하며, 이렇게 만들어진 구조를 &amp;lsquo;&lt;strong&gt;다층 퍼셉트론&lt;/strong&gt;&amp;rsquo; 이라고 부릅니다. 다층 퍼셉트론의 의의는 단층(하나) 퍼셉트론으로는 표현하지 못하는 부분까지 구현할 수 있다는 데에 있습니다.&lt;/p&gt;
&lt;p&gt;다만 이런 퍼셉트론 구조는 큰 한계가 있는데, 바로 이 가중치와 임계값을 사람이 일일히 설정하는 것이 매우 귀찮고, 사실상 불가능한 일이라는 겁니다. 원하는 출력값을 얻기 위해 수십에서 수백, 수천개를 넘어가는 퍼셉트론 간 변수들을 하나하나 사람이 수정한다&amp;hellip;? 상상만 해도 끔찍합니다. 이런 현실적인 문제점을 개선하기 위해서 고안된 것이 신경망 구조입니다. 이런 매개변수를 자동으로 수정하도록 하는 신경망 구조는 다음 포스트에서 확인하겠습니다!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[LeetCode] 124. Binary Tree Maximum Path Sum</title>
        <link>https://whatisthis8047.github.io/ko/post/leetcode_124/</link>
        <pubDate>Thu, 25 Jan 2024 21:15:26 +0900</pubDate>
        
        <guid>https://whatisthis8047.github.io/ko/post/leetcode_124/</guid>
        <description>&lt;h1 id=&#34;binary-tree-maximum-path-sum-이진트리-최대-경로-합-문제와-트리-순회-알고리즘&#34;&gt;Binary Tree Maximum Path Sum (이진트리 최대 경로 합) 문제와 트리 순회 알고리즘&lt;/h1&gt;
&lt;h2 id=&#34;문제-소개&#34;&gt;문제 소개&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;리트코드 원본 문제 : &lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/binary-tree-maximum-path-sum/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(리트코드 사이트)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.&lt;br&gt;
The path sum of a path is the sum of the node&amp;rsquo;s values in the path.&lt;br&gt;
Given the root of a binary tree, return the maximum path sum of any non-empty path.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;한국어로는 다음과 같이 해석 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이진 트리 내의 &lt;strong&gt;경로&lt;/strong&gt;란 인접한 노드들이 연결된 집합이다. 각 노드는 경로에 단 한번만 포함될 수 있고, 루트 노드를 꼭 지날 필요는 없다. 경로의 합(path sum)은 경로에 존재하는 각 노드들의 값을 더한 것이다.&lt;br&gt;
이진 트리의 루트를 입력값으로 받을 때, 비어있지 않은 경로의 &lt;strong&gt;합이 가장 커지는 값&lt;/strong&gt;을 반환하라.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;접근법&#34;&gt;접근법&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;maxPathSum&lt;/span&gt;(self, root):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type root: TreeNode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sideMax&lt;/span&gt;(root):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            leftMax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sideMax(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;left))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rightMax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  max(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, sideMax(root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;right))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; max(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_sum, leftMax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rightMax &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(leftMax, rightMax) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; root&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-inf&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# Initialize to negative infinity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sideMax(root)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max_sum
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;해당 PS 풀이는 도서 &lt;!-- raw HTML omitted --&gt;&lt;a class=&#34;link&#34; href=&#34;https://product.kyobobook.co.kr/detail/S000061898577&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[코딩 인터뷰를 위한 알고리즘 치트시트, 푸둥라이 지음]&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;을 참고하며 진행중임을 밝힙니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[LeetCode] 322. Coin Change</title>
        <link>https://whatisthis8047.github.io/ko/post/leetcode_322/</link>
        <pubDate>Thu, 25 Jan 2024 21:15:26 +0900</pubDate>
        
        <guid>https://whatisthis8047.github.io/ko/post/leetcode_322/</guid>
        <description>&lt;h1 id=&#34;coin-change-동전-계산하기-문제로-동적-계획법-이해하기&#34;&gt;Coin Change (동전 계산하기) 문제로 동적 계획법 이해하기&lt;/h1&gt;
&lt;h2 id=&#34;문제-소개&#34;&gt;문제 소개&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;리트코드 원본 문제  : &lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/problems/coin-change/description/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;(리트코드 사이트)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.&lt;br&gt;
Return &lt;strong&gt;the fewest number of coins&lt;/strong&gt; that you need to make up that amount. If that amount of money &lt;strong&gt;cannot&lt;/strong&gt; be made up by any combination of the coins, &lt;strong&gt;return -1&lt;/strong&gt;. You may assume that you have an infinite number of each kind of coin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이를 한국어로 해석해보자면,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;입력으로 &amp;ldquo;단위가 다른 동전 종류(어레이)&amp;ldquo;와 &amp;ldquo;동전들을 가지고 만들 총 금액&amp;rdquo; 두가지를 받는다.
이때, 총 금액 값을 만드는 &lt;strong&gt;가장 적은 동전의 갯수를 반환&lt;/strong&gt;하라. 만약 가지고 있는 동전들로 총 금액을 만들 수 없는 경우에는 -1을 반환하며, 각 동전의 개수는 항상 총액을 만들 수 있을 만큼 충분히 많다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 문제는 책 초반에 다양한 PS 문제들의 기본적인 접근법이 되는 프레임들을 안내해주는 1.2장에서 소개 되었다. 나는 알고리즘 문제를 풀어보는 경험이 아에 없다시피 하기 때문에 쉽게 쉽게 설명하고 넘어가는 부분에도 한참 시간을 보내며 어떻게 작동하는지 머릿속에 그려봐야 했다.&lt;/p&gt;
&lt;p&gt;책에서 제시하는 키워드는 &lt;strong&gt;DP, 동적 계획법&lt;/strong&gt;으로의 접근이었다.&lt;/p&gt;
&lt;h2 id=&#34;접근법&#34;&gt;접근법&lt;/h2&gt;
&lt;h3 id=&#34;동적-계획법-dynamic-programming&#34;&gt;동적 계획법 [Dynamic Programming]&lt;/h3&gt;
&lt;p&gt;동적 계획법의 개념은 &lt;strong&gt;어렵고 복잡한 문제를 간단한 여러개의 작은 문제들로 나누어 풀이해내는 방법&lt;/strong&gt;이다. 단어 자체가 주는 압박감(?)을 뒤로하고 개념만 들어보면 참 간단하다.&lt;/p&gt;
&lt;p&gt;너무 간단한 개념 설명을 조금 보충할 필요가 있을 것 같아서 위키 설명을 참조해보았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(동적 계획법이란) 주어진 문제를 풀기 위해서, 문제를 여러 개의 하위 문제(subproblem)로 나누어 푼 다음, 그것을 결합하여 최종적인 목적에 도달하는 것이다. 각 하위 문제의 해결을 계산한 뒤, 그 해결책을 저장하여 후에 같은 하위 문제가 나왔을 경우 그것을 간단하게 해결할 수 있다. 이러한 방법으로 동적 계획법은 계산 횟수를 줄일 수 있다. 특히 이 방법은 하위 문제의 수가 기하급수적으로 증가할 때 유용하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자, 그럼 개념을 통해서 동전 계산하기 문제를 보면 주어진 큰 문제를 작은 여러개의 하위 문제로 나눌 필요가 있다. 정말 단순하게 떠오르는 접근법으론 총 금액에서 가지고 있는 종류의 동전을 하나씩 빼보면서 정확히 0을 맞추어 낼 수 있는지를 확인하면 될 것 같다. 그렇다면 여기서 &lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&amp;lsquo;작은 문제&amp;rsquo;는 &amp;lsquo;총 금액에서 종류별 금액을 빼보기&amp;rsquo;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;가 되겠다.
그럼 총 금액을 인자로 받아 가지고 있는 동전의 종류마다 하나씩 빼는 함수를 만들어보자!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;여기 하위 문제를 푸는 함수 dp(n)을 만들었다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;남은 금액 n을 인자로 받고, 가지고 있는 종류의 동전(coin)마다 하나씩 뺀 뒤에 재귀적으로 다시 dp(n - coin)을 넣어준다. 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coin &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coins:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(res, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; coin))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 함수는 동전을 뺐을 때 금액이 0이 되는 경우나 음수가 되는 예외적인 경우를 아직 포함하지 않은 상태로 정말 기초적인 아이디어만 제시한 상태다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(result, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dp(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; coin))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 코드가 핵심인데, 재귀적으로 dp(n - coin)을 부름으로써 coin을 빼는 모든 경우를 계산한다. 그 뒤엔 이를 각각 지금의 result값과 비교해서 더 적은 값(최소 값)을 돌려주도록 설계했다. (이 짧은 부분을 이해하는데 한참이 걸린 것 같다.)&lt;/p&gt;
&lt;p&gt;이제 해당 문제를 실제로 풀이하기 위해 코드를 수정해보자. Solution 클래스와 coinChange 함수는 LeetCode에서 제공하는 기본 템플릿이며, 문제를 풀기 위해서는 이 내부에 입력값과 출력값을 고려하여 코드를 작성하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coinChange&lt;/span&gt;(self, coins, amount):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type coins: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type amount: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;(n): 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 가장 기본적인 케이스(base case)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# 최솟값을 구할 때 비교하기 위해 가장 큰 값인 양의 무한대로 초기화 ()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INF&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coin &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coins:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                subproblem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; coin)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;# 하위 문제의 답이 없을 시 -1을 리턴하므로 건너뛰기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; subproblem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(result, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; subproblem)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INF&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp(amount)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;문제 해결을 위해서 몇가지를 수정하긴 했지만, 핵심 구조는 동일하다!&lt;br&gt;
개인적으로 바로 이해가 안됬던 부분은 &lt;code&gt;result = float(&#39;INF&#39;)&lt;/code&gt; 이 부분이었는데, 곰곰히 생각해보니 이해가 된다. 함수의 핵심 구조는 &lt;code&gt;result = min(result, 1 + dp(n - coin))&lt;/code&gt; 이고 여기서 &lt;code&gt;min()&lt;/code&gt;을 이용하여 최솟값을 누적하여 구해내고 있다. 이렇게 되면 처음 초기화 한 result의 값이 &lt;code&gt;min()&lt;/code&gt;에 들어갔을 때 나올 수 있는 최솟값 보다 항상 커야만 하며, 그러므로 정의할 수 있는 가장 큰 값인 양의 무한대로 초기화를 해야 어떠한 예외없이 result의 초기값이 항상 크다는걸 보장할 수 있다.&lt;/p&gt;
&lt;h3 id=&#34;동적-계획법-개선하기&#34;&gt;동적 계획법 개선하기&lt;/h3&gt;
&lt;p&gt;위의 방식은 단순 재귀함수를 이용한 접근으로 동적계획법을 잘 이용하긴 했지만 같은 게산을 중복으로 하게 되는 경우가 있다.&lt;br&gt;
예를 들어 &lt;code&gt;coins = [2,3,5], amount = 17&lt;/code&gt; 이 입력되었을 때, 위 함수는 &lt;code&gt;17 - 5 - 5 - 2 - 5 = 0&lt;/code&gt; 와&lt;code&gt;17 - 5 - 2 - 5 - 5 = 0&lt;/code&gt;를 계산하는 경우애 첫 &lt;code&gt;dp(17 - 5)&lt;/code&gt; 값을 매번 일일히 계산하고 작은 값을 반환하게 된다.
하지만 만약 이 &lt;code&gt;dp(12)&lt;/code&gt; 값을 어딘가 저장해두고 다시 찾을 때 반환한다면 중복 없이 훨씬 빠르게 문제를 끝낼 수 있게 된다! 이처럼 저장해두는 장소를 보통 &lt;strong&gt;메모&lt;/strong&gt;라고 선언 한다. 아래는 메모를 이용한 동적 계획법 풀이이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;coinChange&lt;/span&gt;(self, coins, amount):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type coins: List[int]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :type amount: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        :rtype: int
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        memo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dp&lt;/span&gt;(n):  &lt;span style=&#34;color:#75715e&#34;&gt;#need to find base case for result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; memo: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n] &lt;span style=&#34;color:#75715e&#34;&gt;# 메모에 값이 있으면 바로 반환&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INF&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coin &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; coins:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sub &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dp(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; coin)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sub &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min(result, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sub)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            memo[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; float(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INF&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; memo[n]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dp(amount)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;memo&lt;/code&gt;를 딕셔너리 형태로 선언하고 메모 값을 먼저 확인하여 중복된 계산을 바로 피할 수 있게 되었다!&lt;/p&gt;
&lt;p&gt;해당 PS 풀이는 도서 &lt;!-- raw HTML omitted --&gt;&lt;a class=&#34;link&#34; href=&#34;https://product.kyobobook.co.kr/detail/S000061898577&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[코딩 인터뷰를 위한 알고리즘 치트시트, 푸둥라이 지음]&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;을 참고하며 진행중임을 밝힙니다.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
